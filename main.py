#!/usr/bin/env python3
"""
Excel Color Extractor - Command Line Interface
‡∏£‡∏±‡∏ö arguments ‡∏à‡∏≤‡∏Å server.py ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON
"""

import os
import re
import math
import uuid
import shutil
import argparse
import json
from datetime import datetime
from pathlib import Path
from typing import Optional
import pandas as pd
from openpyxl import load_workbook
# Ensure pandas and openpyxl are installed

class ColorExtractor:
    def __init__(self, job_id: str):
        self.job_id = job_id
        
    def to_number(self, val):
        """Convert value to number, removing commas"""
        try:
            if val is None:
                return None
            
            str_val = str(val).strip()
            # Remove comma, space, and special characters
            clean_val = re.sub(r'[,\s]', '', str_val)
            clean_val = re.sub(r'[^\d.-]', '', clean_val)
            
            if not clean_val or clean_val in ['', '-', '.']:
                return None
                
            f = float(clean_val)
            if math.isnan(f):
                return None
            return int(f) if f.is_integer() else f
        except:
            return None

    def normalize_rgb(self, fill):
        """Convert ARGB color to RGB hex format - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        if not fill:
            return "FFFFFF"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö patternType ‡∏Å‡πà‡∏≠‡∏ô - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ solid fill ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if hasattr(fill, 'patternType') and fill.patternType:
            pattern_value = fill.patternType.value if hasattr(fill.patternType, 'value') else str(fill.patternType)
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà solid pattern ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ
            if pattern_value != 'solid':
                return "FFFFFF"
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ patternType ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ
            return "FFFFFF"
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Excel theme colors) - ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° 92CDDC
        excluded_colors = [
            "00000000",  # ‡∏™‡∏µ‡πÉ‡∏™
            "F2F2F2"
        ]
        
        color_found = ""
        
        # Check fgColor
        if hasattr(fill, 'fgColor') and fill.fgColor:
            if hasattr(fill.fgColor, 'rgb') and fill.fgColor.rgb:
                color_str = str(fill.fgColor.rgb).upper()
                if color_str == "00000000":
                    return "FFFFFF"
                elif len(color_str) == 8:
                    color_found = color_str[2:]
                elif len(color_str) == 6:
                    color_found = color_str
        
        # Check bgColor
        if not color_found and hasattr(fill, 'bgColor') and fill.bgColor:
            if hasattr(fill.bgColor, 'rgb') and fill.bgColor.rgb:
                color_str = str(fill.bgColor.rgb).upper()
                if color_str == "00000000":
                    return "FFFFFF"
                elif len(color_str) == 8:
                    color_found = color_str[2:]
                elif len(color_str) == 6:
                    color_found = color_str
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if color_found in excluded_colors:
            return "FFFFFF"
        
        return color_found if color_found else "FFFFFF"

    def find_thickness_matrix_in_column_a(self, ws, raw, thickness_num):
        """Find matrix with specific thickness label - ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        thickness_patterns = [
            rf"Thk\.{thickness_num}",
            rf"\b{thickness_num}\b",
            rf"Thickness\s*{thickness_num}",
            rf"‡∏´‡∏ô‡∏≤\s*{thickness_num}",
            rf"‡∏ä‡∏±‡πâ‡∏ô\s*{thickness_num}",
            rf"‡∏£‡∏∞‡∏î‡∏±‡∏ö\s*{thickness_num}"
        ]
        
        # ‡∏´‡∏≤ thickness header ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (column index 0)
        for r in range(raw.shape[0]):
            if raw.shape[1] > 0:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
                cell_val = str(raw.iat[r, 0]).strip() if raw.iat[r, 0] is not None else ""
                for pattern in thickness_patterns:
                    if re.search(pattern, cell_val, re.IGNORECASE):
                        print(f"   ‚úÖ ‡∏û‡∏ö {thickness_num} matrix ‡∏ó‡∏µ‡πà row={r+1}, col=A (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A)")
                        return r
        
        return None

    def find_main_matrix(self, ws, raw):
        """Find main matrix (1 or h/w header) - ‡∏´‡∏≤ 1 ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A, h/w ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        # ‡∏´‡∏≤‡∏à‡∏≤‡∏Å 1 header ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        for r in range(raw.shape[0]):
            if raw.shape[1] > 0:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
                cell_val = str(raw.iat[r, 0]).strip() if raw.iat[r, 0] is not None else ""
                # ‡∏´‡∏≤ 1 header ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
                if re.search(r"\b1\b", cell_val, re.IGNORECASE):
                    print(f"   ‚úÖ ‡∏û‡∏ö 1 matrix (main) ‡∏ó‡∏µ‡πà row={r+1}, col=A (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A)")
                    return r, 0  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô column = 0 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A)
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö 1 header ‡πÉ‡∏´‡πâ‡∏´‡∏≤ h/w header ‡πÅ‡∏ó‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - backward compatibility)
        for r in range(raw.shape[0]):
            for c in range(raw.shape[1]):
                if raw.iat[r, c] is None:
                    continue
                if isinstance(raw.iat[r, c], str):
                    if re.search(r"\bh\s*/\s*w\b", raw.iat[r, c], re.IGNORECASE):
                        print(f"   ‚úÖ ‡∏û‡∏ö h/w matrix (fallback) ‡∏ó‡∏µ‡πà row={r+1}, col={c+1}")
                        return r, c
        
        return None, None

    def read_color_matrix_with_thickness_row(self, ws, raw, hr_main, hc_main, hr_thick, widths, heights, matrix_name=""):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏µ‡∏à‡∏≤‡∏Å thickness row ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ position ‡∏Ç‡∏≠‡∏á main matrix"""
        print(f"     üîç {matrix_name}: ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏µ‡∏à‡∏≤‡∏Å thickness row {hr_thick+1}")
        print(f"     üìç Main matrix: row={hr_main+1}, col={hc_main+1}")
        print(f"     üìç Thickness header: row={hr_thick+1}, col=A")
        
        colors = {}
        
        # ‡∏•‡∏≠‡∏á offset ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô auto-offset ‡πÄ‡∏î‡∏¥‡∏°
        best_colors = {}
        max_valid_colors = 0
        best_offset = (1, 1)
        
        # ‡∏•‡∏≠‡∏á offset ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å thickness row
        for row_offset in [1, 2, 3]:
            for col_offset in [1, 2, 3]:
                test_colors = {}
                valid_count = 0
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 4 ‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏£‡∏Å
                for i_h in range(min(2, len(heights))):
                    for i_w in range(min(2, len(widths))):
                        h, w = heights[i_h], widths[i_w]
                        try:
                            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å thickness row + offset
                            excel_row = hr_thick + row_offset + i_h
                            excel_col = hc_main + col_offset + i_w  # ‡πÉ‡∏ä‡πâ col ‡∏Ç‡∏≠‡∏á main matrix
                            
                            if excel_row <= ws.max_row and excel_col <= ws.max_column:
                                cell = ws.cell(row=excel_row, column=excel_col)
                                color = self.normalize_rgb(cell.fill)
                                test_colors[(h, w)] = color
                                if color != "FFFFFF":
                                    valid_count += 1
                            else:
                                test_colors[(h, w)] = "FFFFFF"
                        except Exception as e:
                            test_colors[(h, w)] = "FFFFFF"
                
                # ‡∏ñ‡πâ‡∏≤ offset ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                if valid_count > max_valid_colors:
                    max_valid_colors = valid_count
                    best_offset = (row_offset, col_offset)
                    print(f"       üéØ offset +{row_offset},+{col_offset}: {valid_count} ‡∏™‡∏µ")
        
        # ‡πÉ‡∏ä‡πâ offset ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á matrix
        row_offset, col_offset = best_offset
        print(f"     ‚úÖ ‡πÉ‡∏ä‡πâ offset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {matrix_name}: +{row_offset},+{col_offset}")
        
        for i_h, h in enumerate(heights):
            for i_w, w in enumerate(widths):
                try:
                    excel_row = hr_thick + row_offset + i_h
                    excel_col = hc_main + col_offset + i_w
                    
                    if excel_row <= ws.max_row and excel_col <= ws.max_column:
                        cell = ws.cell(row=excel_row, column=excel_col)
                        color = self.normalize_rgb(cell.fill)
                        best_colors[(h, w)] = color
                    else:
                        best_colors[(h, w)] = "FFFFFF"
                except:
                    best_colors[(h, w)] = "FFFFFF"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        colored_count = sum(1 for color in best_colors.values() if color != "FFFFFF")
        print(f"     üìä {matrix_name}: ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ {colored_count}/{len(best_colors)} ‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ")
        
        return best_colors

    def read_color_matrix(self, ws, raw, hr, hc, widths, heights):
        """Read colors from matrix - ‡πÉ‡∏ä‡πâ offset ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"""
        color_map = {}
        
        for i_h, h in enumerate(heights):
            for i_w, w in enumerate(widths):
                try:
                    excel_row = hr + 2 + i_h
                    excel_col = hc + 2 + i_w
                    
                    cell = ws.cell(row=excel_row, column=excel_col)
                    color = self.normalize_rgb(cell.fill)
                    color_map[(h, w)] = color
                except Exception:
                    color_map[(h, w)] = "FFFFFF"
                    continue
        
        return color_map

    def scan_all_matrices_in_file(self, xls, wb):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô matrix ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"""
        max_matrices = 1  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ matrix 1
        max_sheet = ""
        all_sheet_matrices = {}
        
        print("\nüîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô matrix...")
        
        for sheet_name in xls.sheet_names:
            if sheet_name.strip().lower() == "‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç":
                continue
                
            print(f"   üìã ‡∏™‡πÅ‡∏Å‡∏ô Sheet: {sheet_name}")
            
            try:
                raw = pd.read_excel(xls, sheet_name=sheet_name, header=None, engine="openpyxl")
                ws = wb[sheet_name]
                
                # ‡∏´‡∏≤ main matrix
                hr, hc = self.find_main_matrix(ws, raw)
                if hr is None:
                    print(f"      ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö main matrix ‡πÉ‡∏ô {sheet_name}")
                    all_sheet_matrices[sheet_name] = []
                    continue
                
                # ‡∏´‡∏≤ matrices ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡∏ô‡∏µ‡πâ
                found_matrices = [1]  # 1 ‡πÄ‡∏õ‡πá‡∏ô main matrix ‡πÄ‡∏™‡∏°‡∏≠
                
                for thickness in range(2, 20):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 matrices
                    hr_thick = self.find_thickness_matrix_in_column_a(ws, raw, thickness)
                    if hr_thick is not None:
                        found_matrices.append(thickness)
                        print(f"      ‚úÖ ‡∏û‡∏ö matrix {thickness}")
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ matrix ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                        break
                
                all_sheet_matrices[sheet_name] = found_matrices
                matrix_count = len(found_matrices)
                print(f"      üìä ‡∏£‡∏ß‡∏° {matrix_count} matrices: {found_matrices}")
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô matrix ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                if matrix_count > max_matrices:
                    max_matrices = matrix_count
                    max_sheet = sheet_name
                    print(f"      üèÜ ‡∏ä‡∏µ‡∏ï {sheet_name} ‡∏°‡∏µ matrix ‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {matrix_count} matrices")
                    
            except Exception as e:
                print(f"      ‚ùå Error ‡∏™‡πÅ‡∏Å‡∏ô {sheet_name}: {e}")
                all_sheet_matrices[sheet_name] = []
        
        print(f"\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô:")
        print(f"   üèÜ ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ matrix ‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {max_sheet} ({max_matrices} matrices)")
        print(f"   üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï:")
        for sheet, matrices in all_sheet_matrices.items():
            if matrices:
                print(f"      - {sheet}: {len(matrices)} matrices {matrices}")
            else:
                print(f"      - {sheet}: ‡πÑ‡∏°‡πà‡∏û‡∏ö matrix")
        
        return max_matrices, all_sheet_matrices

    def process_file(self, input_file: str, output_dir: str, original_filename: str = None):
        """Process the Excel file"""
        try:
            if original_filename:
                base_name = os.path.splitext(original_filename)[0]
            else:
                base_name = os.path.splitext(os.path.basename(input_file))[0]
                # ‡∏•‡∏ö UUID ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (UUID format: 8-4-4-4-12 characters)
                uuid_pattern = r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}_'
                base_name = re.sub(uuid_pattern, '', base_name)
            
            xls = pd.ExcelFile(input_file, engine="openpyxl")
            wb = load_workbook(input_file, data_only=True)
            
            # ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô matrix ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            max_matrices_count, all_sheet_matrices = self.scan_all_matrices_in_file(xls, wb)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô matrix ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            matrix_columns = []
            for i in range(1, max_matrices_count + 1):
                matrix_columns.append(f"{i}_Color")
            
            print(f"\nüìù ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {matrix_columns}")
            
            price_rows = []
            type_rows = []
            price_id = 1
            type_id = 1
            
            # Track processing results
            processed_sheets = 0
            skipped_sheets = []
            warnings = []
            
            for sheet in xls.sheet_names:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheet ‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç
                if sheet.strip().lower() == "‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç":
                    skipped_sheets.append({"sheet": sheet, "reason": "‡∏Ç‡πâ‡∏≤‡∏° Sheet ‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç"})
                    print(f"   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° Sheet: {sheet} (‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç)")
                    continue
                
                print(f"\nüîç ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Sheet: {sheet}")
                
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
                available_matrices = all_sheet_matrices.get(sheet, [])
                if not available_matrices:
                    error_msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö matrix ‡πÉ‡∏î‡πÜ"
                    print(f"   ‚ùå {error_msg} ‡πÉ‡∏ô {sheet}")
                    skipped_sheets.append({"sheet": sheet, "reason": error_msg})
                    continue
                
                raw = pd.read_excel(xls, sheet_name=sheet, header=None, engine="openpyxl")
                ws = wb[sheet]
                
                # Find Glass_QTY and Description
                sheet_glass_qty = 1
                sheet_description = ""
                
                for r in range(raw.shape[0]):
                    for c in range(raw.shape[1] - 1):
                        if raw.iat[r, c] is None:
                            continue
                        cell = str(raw.iat[r, c]).strip()
                        low = cell.lower()
                        
                        if low in ("glass_qty", "glass qty"):
                            next_cell = raw.iat[r, c + 1]
                            qty = self.to_number(next_cell)
                            if qty is not None:
                                sheet_glass_qty = qty
                            
                        elif low == "description":
                            desc = raw.iat[r, c + 1]
                            if desc is not None:
                                sheet_description = str(desc).strip()
                
                # Find main matrix (1 or h/w header)
                hr, hc = self.find_main_matrix(ws, raw)
                
                if hr is None or hc is None:
                    error_msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö main matrix"
                    print(f"   ‚ùå {error_msg} ‡πÉ‡∏ô {sheet}")
                    skipped_sheets.append({"sheet": sheet, "reason": error_msg})
                    continue
                
                # Read widths and heights from main matrix
                widths = []
                for c in range(hc + 1, raw.shape[1]):
                    v = self.to_number(raw.iat[hr, c])
                    if v is None:
                        break
                    widths.append(v)
                
                heights = []
                for r in range(hr + 1, raw.shape[0]):
                    h_val = self.to_number(raw.iat[r, hc])
                    if h_val is None:
                        break
                    heights.append(h_val)
                
                if not widths or not heights:
                    error_msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö dimensions (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á)"
                    print(f"   ‚ùå {error_msg} ‡πÉ‡∏ô {sheet}")
                    skipped_sheets.append({"sheet": sheet, "reason": error_msg})
                    continue
                
                print(f"   üìä Dimensions: {len(heights)} heights x {len(widths)} widths")
                print(f"   üéØ Matrices ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡∏ô‡∏µ‡πâ: {available_matrices}")
                
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏µ‡∏à‡∏≤‡∏Å matrices ‡∏ó‡∏µ‡πà‡∏°‡∏µ
                matrix_colors = {}
                
                # ‡∏≠‡πà‡∏≤‡∏ô matrix 1 (main matrix)
                if 1 in available_matrices:
                    matrix_colors[1] = self.read_color_matrix(ws, raw, hr, hc, widths, heights)
                    print(f"   üé® 1 (main matrix): {len(matrix_colors[1])} colors")
                
                # ‡∏≠‡πà‡∏≤‡∏ô matrices ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                for thickness in available_matrices:
                    if thickness == 1:
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏° matrix 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    
                    hr_thick = self.find_thickness_matrix_in_column_a(ws, raw, thickness)
                    if hr_thick is not None:
                        colors = self.read_color_matrix_with_thickness_row(
                            ws, raw, hr, hc, hr_thick, widths, heights, f"{thickness}"
                        )
                        matrix_colors[thickness] = colors
                        print(f"   üé® {thickness}: {len(colors)} colors ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
                
                # Create Type record
                type_rows.append({
                    "ID": type_id,
                    "Serie": base_name,
                    "Type": sheet.strip(),
                    "Description": sheet_description,
                    "width_min": min(widths),
                    "width_max": max(widths),
                    "height_min": min(heights),
                    "height_max": max(heights),
                })
                type_id += 1
                
                # Create Price records with consistent columns
                sheet_price_count = 0
                for i_h, h in enumerate(heights):
                    for i_w, w in enumerate(widths):
                        # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å main matrix (1)
                        raw_price = raw.iat[hr + 1 + i_h, hc + 1 + i_w]
                        p = self.to_number(raw_price)
                        if p is None:
                            continue
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á price record ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
                        price_record = {
                            "ID": price_id,
                            "Serie": base_name,
                            "Type": sheet.strip(),
                            "Width": w,
                            "Height": h,
                            "Price": p,
                            "Glass_QTY": sheet_glass_qty,
                        }
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏ï‡∏¥‡∏° FFFFFF ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
                        for i in range(1, max_matrices_count + 1):
                            color_key = f"{i}_Color"
                            if i in matrix_colors:
                                color_value = matrix_colors[i].get((h, w), "FFFFFF")
                            else:
                                color_value = "FFFFFF"  # ‡πÑ‡∏°‡πà‡∏°‡∏µ matrix ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡∏ô‡∏µ‡πâ
                            price_record[color_key] = color_value
                        
                        price_rows.append(price_record)
                        price_id += 1
                        sheet_price_count += 1
                
                processed_sheets += 1
                print(f"   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á {sheet_price_count} price records ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {sheet}")
            
            # Ensure output directory exists
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
            
            # Save output files
            price_file = output_path / f"Price_{self.job_id}.xlsx"
            type_file = output_path / f"Type_{self.job_id}.xlsx"
            
            pd.DataFrame(price_rows).to_excel(price_file, index=False)
            pd.DataFrame(type_rows).to_excel(type_file, index=False)
            
            print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(price_rows)} price records, {len(type_rows)} type records")
            print(f"üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {matrix_columns}")
            
            return {
                "price_file": str(price_file),
                "type_file": str(type_file),
                "total_records": len(price_rows),
                "processed_sheets": processed_sheets,
                "skipped_sheets": skipped_sheets,
                "warnings": warnings
            }
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            raise Exception(f"Processing failed: {str(e)}")

def main():
    """Main function to handle command line arguments"""
    parser = argparse.ArgumentParser(description='Excel Color Extractor - Matrix Mode')
    parser.add_argument('--input', required=True, help='Input Excel file path')
    parser.add_argument('--job-id', required=True, help='Job ID for output files')
    parser.add_argument('--output-dir', default='outputs', help='Output directory')
    parser.add_argument('--original-filename', help='Original filename for base name extraction')
    
    args = parser.parse_args()
    
    try:
        # Validate input file
        if not os.path.exists(args.input):
            raise FileNotFoundError(f"Input file not found: {args.input}")
        
        if not args.input.lower().endswith('.xlsx'):
            raise ValueError("Input file must be an .xlsx file")
        
        print(f"üöÄ Starting Excel Color Extractor...")
        print(f"üìÑ Input file: {args.input}")
        print(f"üÜî Job ID: {args.job_id}")
        print(f"üìÅ Output directory: {args.output_dir}")
        if args.original_filename:
            print(f"üìù Original filename: {args.original_filename}")
        
        # Process the file
        extractor = ColorExtractor(args.job_id)
        result = extractor.process_file(
            input_file=args.input,
            output_dir=args.output_dir,
            original_filename=args.original_filename
        )
        
        # Output result as JSON for server.py to parse
        print(json.dumps(result))
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}", file=sys.stderr)
        exit(1)

if __name__ == "__main__":
    import sys
    main()